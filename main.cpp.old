#include <fxcg/display.h>
#include <fxcg/keyboard.h>
#include <fxcg/misc.h>

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) < (Y)) ? (Y) : (X))

#define LCD_WIDTH_PX 384
#define LCD_HEIGHT_PX 216

void setPixel(int x, int y, color_t color) {
  color_t *VRAM = (color_t *)0xA8000000; // emu address of VRAM
  VRAM[y * LCD_WIDTH_PX + x] = color;
}

// https://www.thecrv1yprogrammer.com/2017/01/bresenhams-line-drawing-algorithm-c-c.html
void drawLine(int x0, int y0, int x1, int y1, color_t colour) {
  int dx, dy, p, x, y;

  dx = x1 - x0;
  dy = y1 - y0;

  x = x0;
  y = y0;

  p = 2 * dy - dx;

  while (x < x1) {
    if (p >= 0) {
      setPixel(x, y, colour);
      y = y + 1;
      p = p + 2 * dy - 2 * dx;
    } else {
      setPixel(x, y, colour);
      p = p + 2 * dy;
    }
    x = x + 1;
  }
}

void horizline(int startx, int endx, int ypos, color_t colour) {
  for (int x = startx; x <= endx; x++) {
    setPixel(x, ypos, colour);
  }
}

// https://www.omnimaga.org/asm-language/texture-drawing/
void drawTriangle(int v1x, int v1y, int v2x, int v2y, int v3x, int v3y, color_t colour) {
  int dx1, dx2, dx3;

	if (v2y-v1y > 0) dx1=(v2x-v1x)/(v2y-v1y); else dx1=0;
	if (v3y-v1y > 0) dx2=(v3x-v1x)/(v3y-v1y); else dx2=0;
	if (v3y-v2y > 0) dx3=(v3x-v2x)/(v3y-v2y); else dx3=0;

  int Sx, Ex;
  int Sy, Ey;

  Sx = Ex = v1x;
  Sy = Ey = v1y;

	if(dx1 > dx2) {
		for(;Sy<=v2y;Sy++,Ey++,Sx+=dx2,Ex+=dx1)
			horizline(Sx,Ex,Sy,colour);
		Ex = v2x;
    Ey = v2y;
		for(;Sy<=v3y;Sy++,Ey++,Sx+=dx2,Ex+=dx3)
			horizline(Sx,Ex,Sy,colour);
	} else {
		for(;Sy<=v2y;Sy++,Ey++,Sx+=dx1,Ex+=dx2)
			horizline(Sx,Ex,Sy,colour);
		Sx = v2x;
    Sy = v2y;
		for(;Sy<=v3y;Sy++,Ey++,Sx+=dx3,Ex+=dx2)
			horizline(Sx,Ex,Sy,colour);
	}
}



// Another attempt
// https://stackoverflow.com/questions/7870533/c-triangle-rasterization

typedef struct
{
  short x, y;
  color_t color;
} Point2D;


// min X and max X for every horizontal line within the triangle
long ContourX[LCD_HEIGHT_PX][2];

#define ABS(x) ((x >= 0) ? x : -x)

// Scans a side of a triangle setting min X and max X in ContourX[][]
// (using the Bresenham's line drawing algorithm).
void ScanLine(long x1, long y1, long x2, long y2)
{
  long sx, sy, dx1, dy1, dx2, dy2, x, y, m, n, k, cnt;

  sx = x2 - x1;
  sy = y2 - y1;

  if (sx > 0) dx1 = 1;
  else if (sx < 0) dx1 = -1;
  else dx1 = 0;

  if (sy > 0) dy1 = 1;
  else if (sy < 0) dy1 = -1;
  else dy1 = 0;

  m = ABS(sx);
  n = ABS(sy);
  dx2 = dx1;
  dy2 = 0;

  if (m < n)
  {
    m = ABS(sy);
    n = ABS(sx);
    dx2 = 0;
    dy2 = dy1;
  }

  x = x1; y = y1;
  cnt = m + 1;
  k = n / 2;

  while (cnt--)
  {
    if ((y >= 0) && (y < LCD_HEIGHT_PX))
    {
      if (x < ContourX[y][0]) ContourX[y][0] = x;
      if (x > ContourX[y][1]) ContourX[y][1] = x;
    }

    k += n;
    if (k < m)
    {
      x += dx2;
      y += dy2;
    }
    else
    {
      k -= m;
      x += dx1;
      y += dy1;
    }
  }
}

void DrawTriangle(Point2D p0, Point2D p1, Point2D p2)
{
  int y;

  for (y = 0; y < LCD_HEIGHT_PX; y++)
  {
    ContourX[y][0] = 65535; // min X
    ContourX[y][1] = 65535; // max X
  }

  ScanLine(p0.x, p0.y, p1.x, p1.y);
  ScanLine(p1.x, p1.y, p2.x, p2.y);
  ScanLine(p2.x, p2.y, p0.x, p0.y);

  for (y = 0; y < LCD_HEIGHT_PX; y++)
  {
    if (ContourX[y][1] >= ContourX[y][0])
    {
      long x = ContourX[y][0];
      long len = 1 + ContourX[y][1] - ContourX[y][0];

      // Can draw a horizontal line instead of individual pixels here
      while (len--)
      {
        setPixel(x++, y, p0.color);
      }
    }
  }
}

// 3
// http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html

typedef struct
{
  short x, y;
} Vertice;

int crossProduct(Vertice v1, Vertice v2)
{
    return (v1.x * v2.y - v1.y * v2.x);
}

void fillTriangleSlow(Vertice vt1, Vertice vt2, Vertice vt3)
{
  /* get the bounding box of the triangle */
  int maxX = MAX(vt1.x, MAX(vt2.x, vt3.x));
  int minX = MIN(vt1.x, MIN(vt2.x, vt3.x));
  int maxY = MAX(vt1.y, MAX(vt2.y, vt3.y));
  int minY = MIN(vt1.y, MIN(vt2.y, vt3.y));

  /* spanning vectors of edge (v1,v2) and (v1,v3) */
  Vertice v1;
  v1.x = vt2.x - vt1.x;
  v1.y = vt2.y - vt1.y;
  Vertice v2;
  v2.x = vt3.x - vt1.x;
  v2.y = vt3.y - vt1.y;
  
  /* iterate over each pixel of bounding box and check if it's inside
    * the traingle using the barycentirc approach.
    */
  for (int x = minX; x <= maxX; x++)
  {
      for (int y = minY; y <= maxY; y++)
      {
          Vertice q;
          q.x = x - vt1.x;
          q.y = y - vt1.y;
                  
          float s = (float)crossProduct(q, v2) / crossProduct(v1, v2);
          float t = (float)crossProduct(v1, q) / crossProduct(v1, v2);
          
          if ( (s >= 0) && (t >= 0) && (s + t <= 1))
          {
              setPixel(x, y, 0x0000);
          }
      }
  }
}

int main() {
  PrintXY(1, 1, "--Hello, tWorld!v5", TEXT_MODE_NORMAL, TEXT_COLOR_RED); // Place it somewhere on the screen.  Note that x,y are 1-indexed.

  int key;
  while (1){
    GetKey(&key);
    char buffer[14];
    itoa(key, (unsigned char *)buffer + 2);
    PrintXY(1, 1, buffer, TEXT_MODE_NORMAL, TEXT_COLOR_BLUE);

    if (key == KEY_CTRL_EXE) {
      break;
    }
  }

  int height = LCD_HEIGHT_PX;
  int width = LCD_WIDTH_PX;

  // Random different colours
  color_t colors[] = {0x07E0, 0xF800, 0xFFE0, 0x07FF, 0xF81F, 0xDAE0, 0x000A, 0xF81F,
                      0x17E0, 0x5800, 0x75E0, 0x03AA, 0xAAAA, 0xABCD, 0xA00A, 0xFFFF};

  for (int i = 0; i < 16; i++) {
    for (int x = 0; x < width; x += 1) {
      for (int y = 0; y < height; y += 1){
        setPixel(x, y, 0xFFFF);
      }
    }
    // drawTriangle(10, 10, 10, 100, 100 + (i * 10), 200, 0x0000);

    Vertice p0, p1, p2;

    p0.x = 10;
    p0.y = 10;

    p1.x = 10;
    p1.y = 100;

    p2.x = 100 + (i * 10);
    p2.y = 100 + (i * 10);

    fillTriangleSlow(p0, p1, p2);

    GetKey(&key);
  }

  /* color_t* VRAM = (color_t*)0xA8000000; // emu address of VRAM
  VRAM += (LCD_WIDTH_PX*y + x);
  short j;
  for (j=y; j<y+height; j++) {
    for (int i = x; i< x + width;  i++) {
      *(VRAM++) = 0x07E0;
    }
    VRAM += LCD_WIDTH_PX - width;
  } */

  while (1) {
    GetKey(&key);

    if (key == KEY_CTRL_EXE) {
      break;
    }
  }

  return 0; // Needed if you have main returning int, but will never be reached.
}
